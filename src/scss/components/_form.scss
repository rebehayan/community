@use "sass:list";
@use "sass:map";
@use "../abstract/" as *;

// 폼요소 공통디자인 정의
$formSettings: (
  "height": rem(40),
  "border": rem(1) solid $gray300,
  "borderRadius": rem(40),
  "bgColor": $white,
  "paddingInline": rem(12),
  "fontColor": $gray900,
  "fontSize": rem(14),
  "letterSpacing": rem(0),
  "placehodlerColor": $gray500,
  "disabled": 0.2,
  "readonlyBgColor": rgba($gray400, 0.05),
  "errorBorderColor": $orange400,
  "errorColor": $orange400,
  "focusBorderColor": $gray700,
);
// Select디자인 정의
$selectSetting: (
  "bgUrl": "ico_select.svg",
  "iconPosition": rem(12),
  "paddingRight": rem(10),
);

// 라디오 & 체크박스 디자인 정의
$radioCheckSetting: (
  1: (
    "className": ".radio-type1",
    "offImage": "ico_radio_off.svg",
    "onImage": "ico_radio_on.svg",
    "width": rem(24),
    "height": rem(24),
  ),
  2: (
    "className": ".check-type1",
    "offImage": "ico_check_off.svg",
    "onImage": "ico_check_on.svg",
    "width": rem(24),
    "height": rem(24),
  ),
);

%form {
  height: var(--height, map.get($formSettings, height));
  border: map.get($formSettings, border);
  box-sizing: border-box;
  border-radius: var(--radius, map.get($formSettings, borderRadius));
  background-color: map.get($formSettings, bgColor);
  padding-inline: map.get($formSettings, paddingInline);
  color: map.get($formSettings, fontColor);
  font-size: map.get($formSettings, fontSize);
  line-height: 1;
  letter-spacing: map.get($formSettings, letterSpacing);
  outline: none;
  &::placeholder {
    color: map.get($formSettings, placehodlerColor);
  }
  &:disabled {
    opacity: map.get($formSettings, disabled);
  }
  &[readonly] {
    background: map.get($formSettings, readonlyBgColor);
  }
  &.error {
    border-color: map.get($formSettings, errorBorderColor);
    color: map.get($formSettings, errorColor);
    &:focus {
      border-color: map.get($formSettings, errorBorderColor);
      color: map.get($formSettings, errorColor);
    }
  }
  &:focus {
    border-color: map.get($formSettings, focusBorderColor);
  }
}

%label {
  display: inline-flex;
  gap: rem(2);
  align-items: center;
  color: $gray500;
  font-size: rem(12);
  line-height: 1;
  letter-spacing: rem(0);
}
%checkedLabel {
  color: $gray900;
}

@layer Components {
  .tel {
    display: flex;
    gap: rem(8);
    > * {
      flex: 1;
    }
  }
  .radio-group {
    display: flex;
    flex-wrap: wrap;
    gap: rem(4) rem(10);
    font-size: 0;
  }
  .address {
    display: grid;
    grid-template-columns: 1fr rem(79);
    gap: rem(4) rem(9);
    [type="text"] {
      grid-column: 1/-1;
    }
    .btn {
      font-size: rem(12);
      font-weight: 700;
      line-height: 100%;
      letter-spacing: rem(-1);
      padding-inline: 0;
    }
  }

  .input {
    $width: 100%;

    @extend %form;
    width: $width;
  }

  .select {
    $width: 100%;

    @extend %form;
    @include background(map.get($selectSetting, bgUrl), right map.get($selectSetting, iconPosition) center, $white, 2rem);
    padding-right: map.get($selectSetting, paddingRight);
    appearance: none;
    width: $width;
  }
  .select-group {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: rem(4);
  }

  .textarea {
    --height: rem(20);
    --radius: 1.5rem;

    @extend %form;
    width: 100%;
    padding-block: rem(15);
  }

  @mixin Radio($mapName, $index) {
    #{map.get($mapName, $index, className)} {
      @include a11y-hidden;
      + label {
        @extend %label;

        &::before {
          @include background(map.get($mapName, $index, offImage), center, null, contain);
          content: "";
          width: map.get($mapName, $index, width);
          height: map.get($mapName, $index, height);
        }
      }
      &:checked {
        + label {
          @extend %checkedLabel;

          &::before {
            @include background(map.get($mapName, $index, onImage), center, null, contain);
          }
        }
      }
    }
  }

  @for $idx from 1 through list.length($radioCheckSetting) {
    @include Radio($radioCheckSetting, $idx);
  }
}
